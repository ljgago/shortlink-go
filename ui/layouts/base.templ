package layouts

templ initScript() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<script nonce={ templ.GetNonce(ctx) }>
			document.addEventListener("alpine:init", () => {
				let currentTheme

				if (localStorage.getItem("theme") === "dark" || (!("theme" in localStorage) && window.matchMedia("(prefers-color-scheme: dark)").matches)) {
					document.documentElement.classList.add("dark")
					localStorage.setItem("theme", "dark")
					currentTheme = "dark"
				} else {
					document.documentElement.classList.remove("dark")
					localStorage.setItem("theme", "light")
					currentTheme = "light"
				}

				Alpine.data("theme", () => ({
					isDark: currentTheme === "dark",

					toggleTheme() {
						this.isDark = !this.isDark;
						localStorage.setItem("theme", this.isDark ? "dark" : "light");
						document.documentElement.classList.toggle("dark", this.isDark);
						// dispatch custom enent
						// document.dispatchEvent(new CustomEvent("theme-changed"));					this.open = ! this.open
					}
				}))
			})
		</script>
	}
}

templ BaseLayout(title string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title }</title>
			<link href="/assets/css/output.css" rel="stylesheet"/>
			<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
			@initScript()
		</head>
		<main>
			{ children... }
		</main>
	</html>
}
